# ai_agent.py

from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from langgraph.prebuilt import create_react_agent
from langchain_tavily import TavilySearch
from langchain_openai import ChatOpenAI
from langchain_groq import ChatGroq
import os
from dotenv import load_dotenv
load_dotenv()


# Optional: basic keyword-based real-time query detector

def needs_realtime(query):
    realtime_keywords = ["dream11", "match", "who will win",
                         "schedule", "today", "weather", "news", "prediction"]
    return any(word in query.lower() for word in realtime_keywords)


def get_response_from_ai_agent(llm_id, query, allow_search, system_prompt, provider, session_id=None):
    groq_api_key = os.getenv("GROQ_API_KEY")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    tavily_api_key = os.getenv("TAVILY_API_KEY")

    #  Select LLM provider
    if provider == "Groq":
        if not groq_api_key:
            return " GROQ_API_KEY is missing."
        llm = ChatGroq(model=llm_id, api_key=groq_api_key)

    elif provider == "OpenAI":
        if not openai_api_key:
            return " OPENAI_API_KEY is missing."
        llm = ChatOpenAI(model=llm_id, api_key=openai_api_key)

    else:
        return " Invalid provider selected."

    #  Enable Tavily only for real-time queries
    tools = [TavilySearch(max_results=3, api_key=tavily_api_key)
             ] if allow_search and needs_realtime(query[-1]) else []

    try:
        #  Agent setup
        agent = create_react_agent(model=llm, tools=tools)

        messages = []
        if system_prompt:
            messages.append(SystemMessage(content=system_prompt))

        for q in query:
            messages.append(HumanMessage(content=q))

        state = {"messages": messages}
        response = agent.invoke(state)

        ai_messages = [msg.content for msg in response.get(
            "messages", []) if isinstance(msg, AIMessage)]
        return ai_messages[-1] if ai_messages else "⚠️ No response generated by the agent."

    except Exception as e:
        return f" Exception occurred: {str(e)}"
